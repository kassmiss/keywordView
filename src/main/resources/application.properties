server.port=8071
spring.datasource.url=
spring.datasource.username=
spring.datasource.password=
spring.datasource.driver-class-name=org.mariadb.jdbc.Driver

# JPA가 생성한 SQL문을 콘솔에 표시해준다.
spring.jpa.show-sql=true
# 옵션에 따라 서버 실행 또는 종료시 테이블에 다음과 같은 동작을 한다.
# create : 기존 테이블 삭제 후 새로 만든다.
# create-drop : 종료 시 기존 테이블을 삭제한다.
# update : 변경 부분만 적용한다.
# validate : 엔티티와 테이블간의 매핑 정상 여부만 검증한다.
# none : 아무런 동작을 하지 않는다.
spring.jpa.hibernate.ddl-auto=update
# 위 hivernate에 의한 옵션 기능을 사용할지의 여부
spring.jpa.generate-ddl=true
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
spring.jpa.hibernate.naming.implicit-strategy=org.hibernate.boot.model.naming.ImplicitNamingStrategyLegacyJpaImpl
# 전체 로그
#logging.level.root=info

# 특정 패키지 로그
#logging.level.com.grlife.login=debug
#logging.level.com.grlife.login.controller=debug

# 스프링 프레임워크 로그 관련
#logging.level.org.springframework.web=debug
#logging.level.sql=error

# hibernate에서 생성하는 SQL 로그 끄기
#logging.level.org.hibernate.SQL=off

# JDBC 로그 관련
#logging.level.jdbc=error
#logging.level.jdbc.sqlonly=debug

# 명시한 용량을 초과할 경우 기존 로그를 .gz로 압축하고 신규로 로그를 쌓는다.
#logging.logback.rollingpolicy.max-file-size=100MB

# 해당 일수가 지난 로그는 삭제한다.
#logging.logback.rollingpolicy.max-history=9999999

# 사용자의 홈 디렉토리 아래 폴더 및 파일 생성 됨
#logging.file.name=${user.home}/logs/product.log

#  로그 패턴 설정 (개발툴 콘솔 로그, 파일에 쌓이는 로그 패턴)
logging.pattern.console=%-5level %d{yyyy-MM-dd HH:mm:ss}[%thread] [%F - %M] [%logger{0}:%line] - %msg%n
#logging.pattern.file= %-5level %d{yyyy-MM-dd HH:mm:ss}[%thread] [%F - %M] [%logger{0}:%line] - %msg%n
